/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { EligibilityCriteriaService } from "../eligibilityCriteria.service";
import { EligibilityCriteriaCreateInput } from "./EligibilityCriteriaCreateInput";
import { EligibilityCriteria } from "./EligibilityCriteria";
import { EligibilityCriteriaFindManyArgs } from "./EligibilityCriteriaFindManyArgs";
import { EligibilityCriteriaWhereUniqueInput } from "./EligibilityCriteriaWhereUniqueInput";
import { EligibilityCriteriaUpdateInput } from "./EligibilityCriteriaUpdateInput";

export class EligibilityCriteriaControllerBase {
  constructor(protected readonly service: EligibilityCriteriaService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: EligibilityCriteria })
  async createEligibilityCriteria(
    @common.Body() data: EligibilityCriteriaCreateInput
  ): Promise<EligibilityCriteria> {
    return await this.service.createEligibilityCriteria({
      data: data,
      select: {
        academicBackground: true,
        createdAt: true,
        createdBy: true,
        gender: true,
        id: true,
        incomeBracket: true,
        maxAge: true,
        minAge: true,
        otherRequirements: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [EligibilityCriteria] })
  @ApiNestedQuery(EligibilityCriteriaFindManyArgs)
  async eligibilityCriteriaItems(
    @common.Req() request: Request
  ): Promise<EligibilityCriteria[]> {
    const args = plainToClass(EligibilityCriteriaFindManyArgs, request.query);
    return this.service.eligibilityCriteriaItems({
      ...args,
      select: {
        academicBackground: true,
        createdAt: true,
        createdBy: true,
        gender: true,
        id: true,
        incomeBracket: true,
        maxAge: true,
        minAge: true,
        otherRequirements: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: EligibilityCriteria })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async eligibilityCriteria(
    @common.Param() params: EligibilityCriteriaWhereUniqueInput
  ): Promise<EligibilityCriteria | null> {
    const result = await this.service.eligibilityCriteria({
      where: params,
      select: {
        academicBackground: true,
        createdAt: true,
        createdBy: true,
        gender: true,
        id: true,
        incomeBracket: true,
        maxAge: true,
        minAge: true,
        otherRequirements: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: EligibilityCriteria })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateEligibilityCriteria(
    @common.Param() params: EligibilityCriteriaWhereUniqueInput,
    @common.Body() data: EligibilityCriteriaUpdateInput
  ): Promise<EligibilityCriteria | null> {
    try {
      return await this.service.updateEligibilityCriteria({
        where: params,
        data: data,
        select: {
          academicBackground: true,
          createdAt: true,
          createdBy: true,
          gender: true,
          id: true,
          incomeBracket: true,
          maxAge: true,
          minAge: true,
          otherRequirements: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: EligibilityCriteria })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteEligibilityCriteria(
    @common.Param() params: EligibilityCriteriaWhereUniqueInput
  ): Promise<EligibilityCriteria | null> {
    try {
      return await this.service.deleteEligibilityCriteria({
        where: params,
        select: {
          academicBackground: true,
          createdAt: true,
          createdBy: true,
          gender: true,
          id: true,
          incomeBracket: true,
          maxAge: true,
          minAge: true,
          otherRequirements: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
