/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { EligibilityCriteria } from "./EligibilityCriteria";
import { EligibilityCriteriaCountArgs } from "./EligibilityCriteriaCountArgs";
import { EligibilityCriteriaFindManyArgs } from "./EligibilityCriteriaFindManyArgs";
import { EligibilityCriteriaFindUniqueArgs } from "./EligibilityCriteriaFindUniqueArgs";
import { CreateEligibilityCriteriaArgs } from "./CreateEligibilityCriteriaArgs";
import { UpdateEligibilityCriteriaArgs } from "./UpdateEligibilityCriteriaArgs";
import { DeleteEligibilityCriteriaArgs } from "./DeleteEligibilityCriteriaArgs";
import { EligibilityCriteriaService } from "../eligibilityCriteria.service";
@graphql.Resolver(() => EligibilityCriteria)
export class EligibilityCriteriaResolverBase {
  constructor(protected readonly service: EligibilityCriteriaService) {}

  async _eligibilityCriteriaItemsMeta(
    @graphql.Args() args: EligibilityCriteriaCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [EligibilityCriteria])
  async eligibilityCriteriaItems(
    @graphql.Args() args: EligibilityCriteriaFindManyArgs
  ): Promise<EligibilityCriteria[]> {
    return this.service.eligibilityCriteriaItems(args);
  }

  @graphql.Query(() => EligibilityCriteria, { nullable: true })
  async eligibilityCriteria(
    @graphql.Args() args: EligibilityCriteriaFindUniqueArgs
  ): Promise<EligibilityCriteria | null> {
    const result = await this.service.eligibilityCriteria(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => EligibilityCriteria)
  async createEligibilityCriteria(
    @graphql.Args() args: CreateEligibilityCriteriaArgs
  ): Promise<EligibilityCriteria> {
    return await this.service.createEligibilityCriteria({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => EligibilityCriteria)
  async updateEligibilityCriteria(
    @graphql.Args() args: UpdateEligibilityCriteriaArgs
  ): Promise<EligibilityCriteria | null> {
    try {
      return await this.service.updateEligibilityCriteria({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EligibilityCriteria)
  async deleteEligibilityCriteria(
    @graphql.Args() args: DeleteEligibilityCriteriaArgs
  ): Promise<EligibilityCriteria | null> {
    try {
      return await this.service.deleteEligibilityCriteria(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
