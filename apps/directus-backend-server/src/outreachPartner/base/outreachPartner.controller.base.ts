/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { OutreachPartnerService } from "../outreachPartner.service";
import { OutreachPartnerCreateInput } from "./OutreachPartnerCreateInput";
import { OutreachPartner } from "./OutreachPartner";
import { OutreachPartnerFindManyArgs } from "./OutreachPartnerFindManyArgs";
import { OutreachPartnerWhereUniqueInput } from "./OutreachPartnerWhereUniqueInput";
import { OutreachPartnerUpdateInput } from "./OutreachPartnerUpdateInput";

export class OutreachPartnerControllerBase {
  constructor(protected readonly service: OutreachPartnerService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: OutreachPartner })
  async createOutreachPartner(
    @common.Body() data: OutreachPartnerCreateInput
  ): Promise<OutreachPartner> {
    return await this.service.createOutreachPartner({
      data: data,
      select: {
        createdAt: true,
        email: true,
        id: true,
        kycDetails: true,
        kycStatus: true,
        name: true,
        phone: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [OutreachPartner] })
  @ApiNestedQuery(OutreachPartnerFindManyArgs)
  async outreachPartners(
    @common.Req() request: Request
  ): Promise<OutreachPartner[]> {
    const args = plainToClass(OutreachPartnerFindManyArgs, request.query);
    return this.service.outreachPartners({
      ...args,
      select: {
        createdAt: true,
        email: true,
        id: true,
        kycDetails: true,
        kycStatus: true,
        name: true,
        phone: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: OutreachPartner })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async outreachPartner(
    @common.Param() params: OutreachPartnerWhereUniqueInput
  ): Promise<OutreachPartner | null> {
    const result = await this.service.outreachPartner({
      where: params,
      select: {
        createdAt: true,
        email: true,
        id: true,
        kycDetails: true,
        kycStatus: true,
        name: true,
        phone: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: OutreachPartner })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateOutreachPartner(
    @common.Param() params: OutreachPartnerWhereUniqueInput,
    @common.Body() data: OutreachPartnerUpdateInput
  ): Promise<OutreachPartner | null> {
    try {
      return await this.service.updateOutreachPartner({
        where: params,
        data: data,
        select: {
          createdAt: true,
          email: true,
          id: true,
          kycDetails: true,
          kycStatus: true,
          name: true,
          phone: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: OutreachPartner })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteOutreachPartner(
    @common.Param() params: OutreachPartnerWhereUniqueInput
  ): Promise<OutreachPartner | null> {
    try {
      return await this.service.deleteOutreachPartner({
        where: params,
        select: {
          createdAt: true,
          email: true,
          id: true,
          kycDetails: true,
          kycStatus: true,
          name: true,
          phone: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
