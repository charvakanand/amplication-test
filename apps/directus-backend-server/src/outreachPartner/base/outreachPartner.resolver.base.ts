/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { OutreachPartner } from "./OutreachPartner";
import { OutreachPartnerCountArgs } from "./OutreachPartnerCountArgs";
import { OutreachPartnerFindManyArgs } from "./OutreachPartnerFindManyArgs";
import { OutreachPartnerFindUniqueArgs } from "./OutreachPartnerFindUniqueArgs";
import { CreateOutreachPartnerArgs } from "./CreateOutreachPartnerArgs";
import { UpdateOutreachPartnerArgs } from "./UpdateOutreachPartnerArgs";
import { DeleteOutreachPartnerArgs } from "./DeleteOutreachPartnerArgs";
import { OutreachPartnerService } from "../outreachPartner.service";
@graphql.Resolver(() => OutreachPartner)
export class OutreachPartnerResolverBase {
  constructor(protected readonly service: OutreachPartnerService) {}

  async _outreachPartnersMeta(
    @graphql.Args() args: OutreachPartnerCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [OutreachPartner])
  async outreachPartners(
    @graphql.Args() args: OutreachPartnerFindManyArgs
  ): Promise<OutreachPartner[]> {
    return this.service.outreachPartners(args);
  }

  @graphql.Query(() => OutreachPartner, { nullable: true })
  async outreachPartner(
    @graphql.Args() args: OutreachPartnerFindUniqueArgs
  ): Promise<OutreachPartner | null> {
    const result = await this.service.outreachPartner(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => OutreachPartner)
  async createOutreachPartner(
    @graphql.Args() args: CreateOutreachPartnerArgs
  ): Promise<OutreachPartner> {
    return await this.service.createOutreachPartner({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => OutreachPartner)
  async updateOutreachPartner(
    @graphql.Args() args: UpdateOutreachPartnerArgs
  ): Promise<OutreachPartner | null> {
    try {
      return await this.service.updateOutreachPartner({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => OutreachPartner)
  async deleteOutreachPartner(
    @graphql.Args() args: DeleteOutreachPartnerArgs
  ): Promise<OutreachPartner | null> {
    try {
      return await this.service.deleteOutreachPartner(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
