/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  OutreachPartner as PrismaOutreachPartner,
} from "@prisma/client";

export class OutreachPartnerServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.OutreachPartnerCountArgs, "select">
  ): Promise<number> {
    return this.prisma.outreachPartner.count(args);
  }

  async outreachPartners(
    args: Prisma.OutreachPartnerFindManyArgs
  ): Promise<PrismaOutreachPartner[]> {
    return this.prisma.outreachPartner.findMany(args);
  }
  async outreachPartner(
    args: Prisma.OutreachPartnerFindUniqueArgs
  ): Promise<PrismaOutreachPartner | null> {
    return this.prisma.outreachPartner.findUnique(args);
  }
  async createOutreachPartner(
    args: Prisma.OutreachPartnerCreateArgs
  ): Promise<PrismaOutreachPartner> {
    return this.prisma.outreachPartner.create(args);
  }
  async updateOutreachPartner(
    args: Prisma.OutreachPartnerUpdateArgs
  ): Promise<PrismaOutreachPartner> {
    return this.prisma.outreachPartner.update(args);
  }
  async deleteOutreachPartner(
    args: Prisma.OutreachPartnerDeleteArgs
  ): Promise<PrismaOutreachPartner> {
    return this.prisma.outreachPartner.delete(args);
  }
}
