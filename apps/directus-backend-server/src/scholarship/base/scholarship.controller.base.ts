/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ScholarshipService } from "../scholarship.service";
import { ScholarshipCreateInput } from "./ScholarshipCreateInput";
import { Scholarship } from "./Scholarship";
import { ScholarshipFindManyArgs } from "./ScholarshipFindManyArgs";
import { ScholarshipWhereUniqueInput } from "./ScholarshipWhereUniqueInput";
import { ScholarshipUpdateInput } from "./ScholarshipUpdateInput";
import { ScholarshipApplicationFindManyArgs } from "../../scholarshipApplication/base/ScholarshipApplicationFindManyArgs";
import { ScholarshipApplication } from "../../scholarshipApplication/base/ScholarshipApplication";
import { ScholarshipApplicationWhereUniqueInput } from "../../scholarshipApplication/base/ScholarshipApplicationWhereUniqueInput";

export class ScholarshipControllerBase {
  constructor(protected readonly service: ScholarshipService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Scholarship })
  async createScholarship(
    @common.Body() data: ScholarshipCreateInput
  ): Promise<Scholarship> {
    return await this.service.createScholarship({
      data: {
        ...data,

        scholarshipProvider: data.scholarshipProvider
          ? {
              connect: data.scholarshipProvider,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        description: true,
        id: true,
        isPublished: true,

        scholarshipProvider: {
          select: {
            id: true,
          },
        },

        shortlistingStage: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Scholarship] })
  @ApiNestedQuery(ScholarshipFindManyArgs)
  async scholarships(@common.Req() request: Request): Promise<Scholarship[]> {
    const args = plainToClass(ScholarshipFindManyArgs, request.query);
    return this.service.scholarships({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        isPublished: true,

        scholarshipProvider: {
          select: {
            id: true,
          },
        },

        shortlistingStage: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Scholarship })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async scholarship(
    @common.Param() params: ScholarshipWhereUniqueInput
  ): Promise<Scholarship | null> {
    const result = await this.service.scholarship({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        isPublished: true,

        scholarshipProvider: {
          select: {
            id: true,
          },
        },

        shortlistingStage: true,
        title: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Scholarship })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateScholarship(
    @common.Param() params: ScholarshipWhereUniqueInput,
    @common.Body() data: ScholarshipUpdateInput
  ): Promise<Scholarship | null> {
    try {
      return await this.service.updateScholarship({
        where: params,
        data: {
          ...data,

          scholarshipProvider: data.scholarshipProvider
            ? {
                connect: data.scholarshipProvider,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          description: true,
          id: true,
          isPublished: true,

          scholarshipProvider: {
            select: {
              id: true,
            },
          },

          shortlistingStage: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Scholarship })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteScholarship(
    @common.Param() params: ScholarshipWhereUniqueInput
  ): Promise<Scholarship | null> {
    try {
      return await this.service.deleteScholarship({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          isPublished: true,

          scholarshipProvider: {
            select: {
              id: true,
            },
          },

          shortlistingStage: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/scholarshipApplications")
  @ApiNestedQuery(ScholarshipApplicationFindManyArgs)
  async findScholarshipApplications(
    @common.Req() request: Request,
    @common.Param() params: ScholarshipWhereUniqueInput
  ): Promise<ScholarshipApplication[]> {
    const query = plainToClass(
      ScholarshipApplicationFindManyArgs,
      request.query
    );
    const results = await this.service.findScholarshipApplications(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        isDraft: true,
        responses: true,

        scholarship: {
          select: {
            id: true,
          },
        },

        status: true,

        student: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/scholarshipApplications")
  async connectScholarshipApplications(
    @common.Param() params: ScholarshipWhereUniqueInput,
    @common.Body() body: ScholarshipApplicationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      scholarshipApplications: {
        connect: body,
      },
    };
    await this.service.updateScholarship({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/scholarshipApplications")
  async updateScholarshipApplications(
    @common.Param() params: ScholarshipWhereUniqueInput,
    @common.Body() body: ScholarshipApplicationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      scholarshipApplications: {
        set: body,
      },
    };
    await this.service.updateScholarship({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/scholarshipApplications")
  async disconnectScholarshipApplications(
    @common.Param() params: ScholarshipWhereUniqueInput,
    @common.Body() body: ScholarshipApplicationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      scholarshipApplications: {
        disconnect: body,
      },
    };
    await this.service.updateScholarship({
      where: params,
      data,
      select: { id: true },
    });
  }
}
