/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Scholarship } from "./Scholarship";
import { ScholarshipCountArgs } from "./ScholarshipCountArgs";
import { ScholarshipFindManyArgs } from "./ScholarshipFindManyArgs";
import { ScholarshipFindUniqueArgs } from "./ScholarshipFindUniqueArgs";
import { CreateScholarshipArgs } from "./CreateScholarshipArgs";
import { UpdateScholarshipArgs } from "./UpdateScholarshipArgs";
import { DeleteScholarshipArgs } from "./DeleteScholarshipArgs";
import { ScholarshipApplicationFindManyArgs } from "../../scholarshipApplication/base/ScholarshipApplicationFindManyArgs";
import { ScholarshipApplication } from "../../scholarshipApplication/base/ScholarshipApplication";
import { ScholarshipProvider } from "../../scholarshipProvider/base/ScholarshipProvider";
import { ScholarshipService } from "../scholarship.service";
@graphql.Resolver(() => Scholarship)
export class ScholarshipResolverBase {
  constructor(protected readonly service: ScholarshipService) {}

  async _scholarshipsMeta(
    @graphql.Args() args: ScholarshipCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Scholarship])
  async scholarships(
    @graphql.Args() args: ScholarshipFindManyArgs
  ): Promise<Scholarship[]> {
    return this.service.scholarships(args);
  }

  @graphql.Query(() => Scholarship, { nullable: true })
  async scholarship(
    @graphql.Args() args: ScholarshipFindUniqueArgs
  ): Promise<Scholarship | null> {
    const result = await this.service.scholarship(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Scholarship)
  async createScholarship(
    @graphql.Args() args: CreateScholarshipArgs
  ): Promise<Scholarship> {
    return await this.service.createScholarship({
      ...args,
      data: {
        ...args.data,

        scholarshipProvider: args.data.scholarshipProvider
          ? {
              connect: args.data.scholarshipProvider,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Scholarship)
  async updateScholarship(
    @graphql.Args() args: UpdateScholarshipArgs
  ): Promise<Scholarship | null> {
    try {
      return await this.service.updateScholarship({
        ...args,
        data: {
          ...args.data,

          scholarshipProvider: args.data.scholarshipProvider
            ? {
                connect: args.data.scholarshipProvider,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Scholarship)
  async deleteScholarship(
    @graphql.Args() args: DeleteScholarshipArgs
  ): Promise<Scholarship | null> {
    try {
      return await this.service.deleteScholarship(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [ScholarshipApplication], {
    name: "scholarshipApplications",
  })
  async findScholarshipApplications(
    @graphql.Parent() parent: Scholarship,
    @graphql.Args() args: ScholarshipApplicationFindManyArgs
  ): Promise<ScholarshipApplication[]> {
    const results = await this.service.findScholarshipApplications(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => ScholarshipProvider, {
    nullable: true,
    name: "scholarshipProvider",
  })
  async getScholarshipProvider(
    @graphql.Parent() parent: Scholarship
  ): Promise<ScholarshipProvider | null> {
    const result = await this.service.getScholarshipProvider(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
