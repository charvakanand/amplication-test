/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ScholarshipApplicationService } from "../scholarshipApplication.service";
import { ScholarshipApplicationCreateInput } from "./ScholarshipApplicationCreateInput";
import { ScholarshipApplication } from "./ScholarshipApplication";
import { ScholarshipApplicationFindManyArgs } from "./ScholarshipApplicationFindManyArgs";
import { ScholarshipApplicationWhereUniqueInput } from "./ScholarshipApplicationWhereUniqueInput";
import { ScholarshipApplicationUpdateInput } from "./ScholarshipApplicationUpdateInput";
import { EvaluationFindManyArgs } from "../../evaluation/base/EvaluationFindManyArgs";
import { Evaluation } from "../../evaluation/base/Evaluation";
import { EvaluationWhereUniqueInput } from "../../evaluation/base/EvaluationWhereUniqueInput";

export class ScholarshipApplicationControllerBase {
  constructor(protected readonly service: ScholarshipApplicationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ScholarshipApplication })
  async createScholarshipApplication(
    @common.Body() data: ScholarshipApplicationCreateInput
  ): Promise<ScholarshipApplication> {
    return await this.service.createScholarshipApplication({
      data: {
        ...data,

        scholarship: data.scholarship
          ? {
              connect: data.scholarship,
            }
          : undefined,

        student: data.student
          ? {
              connect: data.student,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,
        isDraft: true,
        responses: true,

        scholarship: {
          select: {
            id: true,
          },
        },

        status: true,

        student: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ScholarshipApplication] })
  @ApiNestedQuery(ScholarshipApplicationFindManyArgs)
  async scholarshipApplications(
    @common.Req() request: Request
  ): Promise<ScholarshipApplication[]> {
    const args = plainToClass(
      ScholarshipApplicationFindManyArgs,
      request.query
    );
    return this.service.scholarshipApplications({
      ...args,
      select: {
        createdAt: true,
        id: true,
        isDraft: true,
        responses: true,

        scholarship: {
          select: {
            id: true,
          },
        },

        status: true,

        student: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ScholarshipApplication })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async scholarshipApplication(
    @common.Param() params: ScholarshipApplicationWhereUniqueInput
  ): Promise<ScholarshipApplication | null> {
    const result = await this.service.scholarshipApplication({
      where: params,
      select: {
        createdAt: true,
        id: true,
        isDraft: true,
        responses: true,

        scholarship: {
          select: {
            id: true,
          },
        },

        status: true,

        student: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ScholarshipApplication })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateScholarshipApplication(
    @common.Param() params: ScholarshipApplicationWhereUniqueInput,
    @common.Body() data: ScholarshipApplicationUpdateInput
  ): Promise<ScholarshipApplication | null> {
    try {
      return await this.service.updateScholarshipApplication({
        where: params,
        data: {
          ...data,

          scholarship: data.scholarship
            ? {
                connect: data.scholarship,
              }
            : undefined,

          student: data.student
            ? {
                connect: data.student,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,
          isDraft: true,
          responses: true,

          scholarship: {
            select: {
              id: true,
            },
          },

          status: true,

          student: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ScholarshipApplication })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteScholarshipApplication(
    @common.Param() params: ScholarshipApplicationWhereUniqueInput
  ): Promise<ScholarshipApplication | null> {
    try {
      return await this.service.deleteScholarshipApplication({
        where: params,
        select: {
          createdAt: true,
          id: true,
          isDraft: true,
          responses: true,

          scholarship: {
            select: {
              id: true,
            },
          },

          status: true,

          student: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/evaluations")
  @ApiNestedQuery(EvaluationFindManyArgs)
  async findEvaluations(
    @common.Req() request: Request,
    @common.Param() params: ScholarshipApplicationWhereUniqueInput
  ): Promise<Evaluation[]> {
    const query = plainToClass(EvaluationFindManyArgs, request.query);
    const results = await this.service.findEvaluations(params.id, {
      ...query,
      select: {
        assessmentType: true,
        comments: true,
        createdAt: true,
        evaluator: true,
        id: true,

        scholarshipApplication: {
          select: {
            id: true,
          },
        },

        score: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/evaluations")
  async connectEvaluations(
    @common.Param() params: ScholarshipApplicationWhereUniqueInput,
    @common.Body() body: EvaluationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      evaluations: {
        connect: body,
      },
    };
    await this.service.updateScholarshipApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/evaluations")
  async updateEvaluations(
    @common.Param() params: ScholarshipApplicationWhereUniqueInput,
    @common.Body() body: EvaluationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      evaluations: {
        set: body,
      },
    };
    await this.service.updateScholarshipApplication({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/evaluations")
  async disconnectEvaluations(
    @common.Param() params: ScholarshipApplicationWhereUniqueInput,
    @common.Body() body: EvaluationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      evaluations: {
        disconnect: body,
      },
    };
    await this.service.updateScholarshipApplication({
      where: params,
      data,
      select: { id: true },
    });
  }
}
