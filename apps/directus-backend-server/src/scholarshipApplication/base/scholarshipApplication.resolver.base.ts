/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ScholarshipApplication } from "./ScholarshipApplication";
import { ScholarshipApplicationCountArgs } from "./ScholarshipApplicationCountArgs";
import { ScholarshipApplicationFindManyArgs } from "./ScholarshipApplicationFindManyArgs";
import { ScholarshipApplicationFindUniqueArgs } from "./ScholarshipApplicationFindUniqueArgs";
import { CreateScholarshipApplicationArgs } from "./CreateScholarshipApplicationArgs";
import { UpdateScholarshipApplicationArgs } from "./UpdateScholarshipApplicationArgs";
import { DeleteScholarshipApplicationArgs } from "./DeleteScholarshipApplicationArgs";
import { EvaluationFindManyArgs } from "../../evaluation/base/EvaluationFindManyArgs";
import { Evaluation } from "../../evaluation/base/Evaluation";
import { Scholarship } from "../../scholarship/base/Scholarship";
import { Student } from "../../student/base/Student";
import { ScholarshipApplicationService } from "../scholarshipApplication.service";
@graphql.Resolver(() => ScholarshipApplication)
export class ScholarshipApplicationResolverBase {
  constructor(protected readonly service: ScholarshipApplicationService) {}

  async _scholarshipApplicationsMeta(
    @graphql.Args() args: ScholarshipApplicationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ScholarshipApplication])
  async scholarshipApplications(
    @graphql.Args() args: ScholarshipApplicationFindManyArgs
  ): Promise<ScholarshipApplication[]> {
    return this.service.scholarshipApplications(args);
  }

  @graphql.Query(() => ScholarshipApplication, { nullable: true })
  async scholarshipApplication(
    @graphql.Args() args: ScholarshipApplicationFindUniqueArgs
  ): Promise<ScholarshipApplication | null> {
    const result = await this.service.scholarshipApplication(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ScholarshipApplication)
  async createScholarshipApplication(
    @graphql.Args() args: CreateScholarshipApplicationArgs
  ): Promise<ScholarshipApplication> {
    return await this.service.createScholarshipApplication({
      ...args,
      data: {
        ...args.data,

        scholarship: args.data.scholarship
          ? {
              connect: args.data.scholarship,
            }
          : undefined,

        student: args.data.student
          ? {
              connect: args.data.student,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => ScholarshipApplication)
  async updateScholarshipApplication(
    @graphql.Args() args: UpdateScholarshipApplicationArgs
  ): Promise<ScholarshipApplication | null> {
    try {
      return await this.service.updateScholarshipApplication({
        ...args,
        data: {
          ...args.data,

          scholarship: args.data.scholarship
            ? {
                connect: args.data.scholarship,
              }
            : undefined,

          student: args.data.student
            ? {
                connect: args.data.student,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ScholarshipApplication)
  async deleteScholarshipApplication(
    @graphql.Args() args: DeleteScholarshipApplicationArgs
  ): Promise<ScholarshipApplication | null> {
    try {
      return await this.service.deleteScholarshipApplication(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Evaluation], { name: "evaluations" })
  async findEvaluations(
    @graphql.Parent() parent: ScholarshipApplication,
    @graphql.Args() args: EvaluationFindManyArgs
  ): Promise<Evaluation[]> {
    const results = await this.service.findEvaluations(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Scholarship, {
    nullable: true,
    name: "scholarship",
  })
  async getScholarship(
    @graphql.Parent() parent: ScholarshipApplication
  ): Promise<Scholarship | null> {
    const result = await this.service.getScholarship(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Student, {
    nullable: true,
    name: "student",
  })
  async getStudent(
    @graphql.Parent() parent: ScholarshipApplication
  ): Promise<Student | null> {
    const result = await this.service.getStudent(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
