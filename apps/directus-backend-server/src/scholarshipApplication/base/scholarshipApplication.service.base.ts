/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ScholarshipApplication as PrismaScholarshipApplication,
  Evaluation as PrismaEvaluation,
  Scholarship as PrismaScholarship,
  Student as PrismaStudent,
} from "@prisma/client";

export class ScholarshipApplicationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ScholarshipApplicationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.scholarshipApplication.count(args);
  }

  async scholarshipApplications(
    args: Prisma.ScholarshipApplicationFindManyArgs
  ): Promise<PrismaScholarshipApplication[]> {
    return this.prisma.scholarshipApplication.findMany(args);
  }
  async scholarshipApplication(
    args: Prisma.ScholarshipApplicationFindUniqueArgs
  ): Promise<PrismaScholarshipApplication | null> {
    return this.prisma.scholarshipApplication.findUnique(args);
  }
  async createScholarshipApplication(
    args: Prisma.ScholarshipApplicationCreateArgs
  ): Promise<PrismaScholarshipApplication> {
    return this.prisma.scholarshipApplication.create(args);
  }
  async updateScholarshipApplication(
    args: Prisma.ScholarshipApplicationUpdateArgs
  ): Promise<PrismaScholarshipApplication> {
    return this.prisma.scholarshipApplication.update(args);
  }
  async deleteScholarshipApplication(
    args: Prisma.ScholarshipApplicationDeleteArgs
  ): Promise<PrismaScholarshipApplication> {
    return this.prisma.scholarshipApplication.delete(args);
  }

  async findEvaluations(
    parentId: string,
    args: Prisma.EvaluationFindManyArgs
  ): Promise<PrismaEvaluation[]> {
    return this.prisma.scholarshipApplication
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .evaluations(args);
  }

  async getScholarship(parentId: string): Promise<PrismaScholarship | null> {
    return this.prisma.scholarshipApplication
      .findUnique({
        where: { id: parentId },
      })
      .scholarship();
  }

  async getStudent(parentId: string): Promise<PrismaStudent | null> {
    return this.prisma.scholarshipApplication
      .findUnique({
        where: { id: parentId },
      })
      .student();
  }
}
