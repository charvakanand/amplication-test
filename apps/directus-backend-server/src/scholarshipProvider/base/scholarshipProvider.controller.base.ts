/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ScholarshipProviderService } from "../scholarshipProvider.service";
import { ScholarshipProviderCreateInput } from "./ScholarshipProviderCreateInput";
import { ScholarshipProvider } from "./ScholarshipProvider";
import { ScholarshipProviderFindManyArgs } from "./ScholarshipProviderFindManyArgs";
import { ScholarshipProviderWhereUniqueInput } from "./ScholarshipProviderWhereUniqueInput";
import { ScholarshipProviderUpdateInput } from "./ScholarshipProviderUpdateInput";
import { ScholarshipFindManyArgs } from "../../scholarship/base/ScholarshipFindManyArgs";
import { Scholarship } from "../../scholarship/base/Scholarship";
import { ScholarshipWhereUniqueInput } from "../../scholarship/base/ScholarshipWhereUniqueInput";

export class ScholarshipProviderControllerBase {
  constructor(protected readonly service: ScholarshipProviderService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ScholarshipProvider })
  async createScholarshipProvider(
    @common.Body() data: ScholarshipProviderCreateInput
  ): Promise<ScholarshipProvider> {
    return await this.service.createScholarshipProvider({
      data: data,
      select: {
        contactEmail: true,
        createdAt: true,
        id: true,
        name: true,
        onboardingStatus: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ScholarshipProvider] })
  @ApiNestedQuery(ScholarshipProviderFindManyArgs)
  async scholarshipProviders(
    @common.Req() request: Request
  ): Promise<ScholarshipProvider[]> {
    const args = plainToClass(ScholarshipProviderFindManyArgs, request.query);
    return this.service.scholarshipProviders({
      ...args,
      select: {
        contactEmail: true,
        createdAt: true,
        id: true,
        name: true,
        onboardingStatus: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ScholarshipProvider })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async scholarshipProvider(
    @common.Param() params: ScholarshipProviderWhereUniqueInput
  ): Promise<ScholarshipProvider | null> {
    const result = await this.service.scholarshipProvider({
      where: params,
      select: {
        contactEmail: true,
        createdAt: true,
        id: true,
        name: true,
        onboardingStatus: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ScholarshipProvider })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateScholarshipProvider(
    @common.Param() params: ScholarshipProviderWhereUniqueInput,
    @common.Body() data: ScholarshipProviderUpdateInput
  ): Promise<ScholarshipProvider | null> {
    try {
      return await this.service.updateScholarshipProvider({
        where: params,
        data: data,
        select: {
          contactEmail: true,
          createdAt: true,
          id: true,
          name: true,
          onboardingStatus: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ScholarshipProvider })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteScholarshipProvider(
    @common.Param() params: ScholarshipProviderWhereUniqueInput
  ): Promise<ScholarshipProvider | null> {
    try {
      return await this.service.deleteScholarshipProvider({
        where: params,
        select: {
          contactEmail: true,
          createdAt: true,
          id: true,
          name: true,
          onboardingStatus: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/scholarships")
  @ApiNestedQuery(ScholarshipFindManyArgs)
  async findScholarships(
    @common.Req() request: Request,
    @common.Param() params: ScholarshipProviderWhereUniqueInput
  ): Promise<Scholarship[]> {
    const query = plainToClass(ScholarshipFindManyArgs, request.query);
    const results = await this.service.findScholarships(params.id, {
      ...query,
      select: {
        createdAt: true,
        description: true,
        id: true,
        isPublished: true,

        scholarshipProvider: {
          select: {
            id: true,
          },
        },

        shortlistingStage: true,
        title: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/scholarships")
  async connectScholarships(
    @common.Param() params: ScholarshipProviderWhereUniqueInput,
    @common.Body() body: ScholarshipWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      scholarships: {
        connect: body,
      },
    };
    await this.service.updateScholarshipProvider({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/scholarships")
  async updateScholarships(
    @common.Param() params: ScholarshipProviderWhereUniqueInput,
    @common.Body() body: ScholarshipWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      scholarships: {
        set: body,
      },
    };
    await this.service.updateScholarshipProvider({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/scholarships")
  async disconnectScholarships(
    @common.Param() params: ScholarshipProviderWhereUniqueInput,
    @common.Body() body: ScholarshipWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      scholarships: {
        disconnect: body,
      },
    };
    await this.service.updateScholarshipProvider({
      where: params,
      data,
      select: { id: true },
    });
  }
}
