/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ScholarshipProvider } from "./ScholarshipProvider";
import { ScholarshipProviderCountArgs } from "./ScholarshipProviderCountArgs";
import { ScholarshipProviderFindManyArgs } from "./ScholarshipProviderFindManyArgs";
import { ScholarshipProviderFindUniqueArgs } from "./ScholarshipProviderFindUniqueArgs";
import { CreateScholarshipProviderArgs } from "./CreateScholarshipProviderArgs";
import { UpdateScholarshipProviderArgs } from "./UpdateScholarshipProviderArgs";
import { DeleteScholarshipProviderArgs } from "./DeleteScholarshipProviderArgs";
import { ScholarshipFindManyArgs } from "../../scholarship/base/ScholarshipFindManyArgs";
import { Scholarship } from "../../scholarship/base/Scholarship";
import { ScholarshipProviderService } from "../scholarshipProvider.service";
@graphql.Resolver(() => ScholarshipProvider)
export class ScholarshipProviderResolverBase {
  constructor(protected readonly service: ScholarshipProviderService) {}

  async _scholarshipProvidersMeta(
    @graphql.Args() args: ScholarshipProviderCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ScholarshipProvider])
  async scholarshipProviders(
    @graphql.Args() args: ScholarshipProviderFindManyArgs
  ): Promise<ScholarshipProvider[]> {
    return this.service.scholarshipProviders(args);
  }

  @graphql.Query(() => ScholarshipProvider, { nullable: true })
  async scholarshipProvider(
    @graphql.Args() args: ScholarshipProviderFindUniqueArgs
  ): Promise<ScholarshipProvider | null> {
    const result = await this.service.scholarshipProvider(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ScholarshipProvider)
  async createScholarshipProvider(
    @graphql.Args() args: CreateScholarshipProviderArgs
  ): Promise<ScholarshipProvider> {
    return await this.service.createScholarshipProvider({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ScholarshipProvider)
  async updateScholarshipProvider(
    @graphql.Args() args: UpdateScholarshipProviderArgs
  ): Promise<ScholarshipProvider | null> {
    try {
      return await this.service.updateScholarshipProvider({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ScholarshipProvider)
  async deleteScholarshipProvider(
    @graphql.Args() args: DeleteScholarshipProviderArgs
  ): Promise<ScholarshipProvider | null> {
    try {
      return await this.service.deleteScholarshipProvider(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Scholarship], { name: "scholarships" })
  async findScholarships(
    @graphql.Parent() parent: ScholarshipProvider,
    @graphql.Args() args: ScholarshipFindManyArgs
  ): Promise<Scholarship[]> {
    const results = await this.service.findScholarships(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
