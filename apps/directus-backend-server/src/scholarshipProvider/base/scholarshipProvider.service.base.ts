/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ScholarshipProvider as PrismaScholarshipProvider,
  Scholarship as PrismaScholarship,
} from "@prisma/client";

export class ScholarshipProviderServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ScholarshipProviderCountArgs, "select">
  ): Promise<number> {
    return this.prisma.scholarshipProvider.count(args);
  }

  async scholarshipProviders(
    args: Prisma.ScholarshipProviderFindManyArgs
  ): Promise<PrismaScholarshipProvider[]> {
    return this.prisma.scholarshipProvider.findMany(args);
  }
  async scholarshipProvider(
    args: Prisma.ScholarshipProviderFindUniqueArgs
  ): Promise<PrismaScholarshipProvider | null> {
    return this.prisma.scholarshipProvider.findUnique(args);
  }
  async createScholarshipProvider(
    args: Prisma.ScholarshipProviderCreateArgs
  ): Promise<PrismaScholarshipProvider> {
    return this.prisma.scholarshipProvider.create(args);
  }
  async updateScholarshipProvider(
    args: Prisma.ScholarshipProviderUpdateArgs
  ): Promise<PrismaScholarshipProvider> {
    return this.prisma.scholarshipProvider.update(args);
  }
  async deleteScholarshipProvider(
    args: Prisma.ScholarshipProviderDeleteArgs
  ): Promise<PrismaScholarshipProvider> {
    return this.prisma.scholarshipProvider.delete(args);
  }

  async findScholarships(
    parentId: string,
    args: Prisma.ScholarshipFindManyArgs
  ): Promise<PrismaScholarship[]> {
    return this.prisma.scholarshipProvider
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .scholarships(args);
  }
}
