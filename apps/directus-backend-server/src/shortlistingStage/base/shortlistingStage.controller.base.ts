/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ShortlistingStageService } from "../shortlistingStage.service";
import { ShortlistingStageCreateInput } from "./ShortlistingStageCreateInput";
import { ShortlistingStage } from "./ShortlistingStage";
import { ShortlistingStageFindManyArgs } from "./ShortlistingStageFindManyArgs";
import { ShortlistingStageWhereUniqueInput } from "./ShortlistingStageWhereUniqueInput";
import { ShortlistingStageUpdateInput } from "./ShortlistingStageUpdateInput";

export class ShortlistingStageControllerBase {
  constructor(protected readonly service: ShortlistingStageService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ShortlistingStage })
  async createShortlistingStage(
    @common.Body() data: ShortlistingStageCreateInput
  ): Promise<ShortlistingStage> {
    return await this.service.createShortlistingStage({
      data: data,
      select: {
        createdAt: true,
        createdBy: true,
        definedBy: true,
        description: true,
        id: true,
        name: true,
        order: true,
        parameters: true,
        typeField: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ShortlistingStage] })
  @ApiNestedQuery(ShortlistingStageFindManyArgs)
  async shortlistingStages(
    @common.Req() request: Request
  ): Promise<ShortlistingStage[]> {
    const args = plainToClass(ShortlistingStageFindManyArgs, request.query);
    return this.service.shortlistingStages({
      ...args,
      select: {
        createdAt: true,
        createdBy: true,
        definedBy: true,
        description: true,
        id: true,
        name: true,
        order: true,
        parameters: true,
        typeField: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ShortlistingStage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async shortlistingStage(
    @common.Param() params: ShortlistingStageWhereUniqueInput
  ): Promise<ShortlistingStage | null> {
    const result = await this.service.shortlistingStage({
      where: params,
      select: {
        createdAt: true,
        createdBy: true,
        definedBy: true,
        description: true,
        id: true,
        name: true,
        order: true,
        parameters: true,
        typeField: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ShortlistingStage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateShortlistingStage(
    @common.Param() params: ShortlistingStageWhereUniqueInput,
    @common.Body() data: ShortlistingStageUpdateInput
  ): Promise<ShortlistingStage | null> {
    try {
      return await this.service.updateShortlistingStage({
        where: params,
        data: data,
        select: {
          createdAt: true,
          createdBy: true,
          definedBy: true,
          description: true,
          id: true,
          name: true,
          order: true,
          parameters: true,
          typeField: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ShortlistingStage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteShortlistingStage(
    @common.Param() params: ShortlistingStageWhereUniqueInput
  ): Promise<ShortlistingStage | null> {
    try {
      return await this.service.deleteShortlistingStage({
        where: params,
        select: {
          createdAt: true,
          createdBy: true,
          definedBy: true,
          description: true,
          id: true,
          name: true,
          order: true,
          parameters: true,
          typeField: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
