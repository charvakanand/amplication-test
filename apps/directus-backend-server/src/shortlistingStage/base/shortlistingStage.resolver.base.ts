/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ShortlistingStage } from "./ShortlistingStage";
import { ShortlistingStageCountArgs } from "./ShortlistingStageCountArgs";
import { ShortlistingStageFindManyArgs } from "./ShortlistingStageFindManyArgs";
import { ShortlistingStageFindUniqueArgs } from "./ShortlistingStageFindUniqueArgs";
import { CreateShortlistingStageArgs } from "./CreateShortlistingStageArgs";
import { UpdateShortlistingStageArgs } from "./UpdateShortlistingStageArgs";
import { DeleteShortlistingStageArgs } from "./DeleteShortlistingStageArgs";
import { ShortlistingStageService } from "../shortlistingStage.service";
@graphql.Resolver(() => ShortlistingStage)
export class ShortlistingStageResolverBase {
  constructor(protected readonly service: ShortlistingStageService) {}

  async _shortlistingStagesMeta(
    @graphql.Args() args: ShortlistingStageCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ShortlistingStage])
  async shortlistingStages(
    @graphql.Args() args: ShortlistingStageFindManyArgs
  ): Promise<ShortlistingStage[]> {
    return this.service.shortlistingStages(args);
  }

  @graphql.Query(() => ShortlistingStage, { nullable: true })
  async shortlistingStage(
    @graphql.Args() args: ShortlistingStageFindUniqueArgs
  ): Promise<ShortlistingStage | null> {
    const result = await this.service.shortlistingStage(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ShortlistingStage)
  async createShortlistingStage(
    @graphql.Args() args: CreateShortlistingStageArgs
  ): Promise<ShortlistingStage> {
    return await this.service.createShortlistingStage({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ShortlistingStage)
  async updateShortlistingStage(
    @graphql.Args() args: UpdateShortlistingStageArgs
  ): Promise<ShortlistingStage | null> {
    try {
      return await this.service.updateShortlistingStage({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ShortlistingStage)
  async deleteShortlistingStage(
    @graphql.Args() args: DeleteShortlistingStageArgs
  ): Promise<ShortlistingStage | null> {
    try {
      return await this.service.deleteShortlistingStage(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
