/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { StaffMember } from "./StaffMember";
import { StaffMemberCountArgs } from "./StaffMemberCountArgs";
import { StaffMemberFindManyArgs } from "./StaffMemberFindManyArgs";
import { StaffMemberFindUniqueArgs } from "./StaffMemberFindUniqueArgs";
import { CreateStaffMemberArgs } from "./CreateStaffMemberArgs";
import { UpdateStaffMemberArgs } from "./UpdateStaffMemberArgs";
import { DeleteStaffMemberArgs } from "./DeleteStaffMemberArgs";
import { StaffMemberService } from "../staffMember.service";
@graphql.Resolver(() => StaffMember)
export class StaffMemberResolverBase {
  constructor(protected readonly service: StaffMemberService) {}

  async _staffMembersMeta(
    @graphql.Args() args: StaffMemberCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [StaffMember])
  async staffMembers(
    @graphql.Args() args: StaffMemberFindManyArgs
  ): Promise<StaffMember[]> {
    return this.service.staffMembers(args);
  }

  @graphql.Query(() => StaffMember, { nullable: true })
  async staffMember(
    @graphql.Args() args: StaffMemberFindUniqueArgs
  ): Promise<StaffMember | null> {
    const result = await this.service.staffMember(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => StaffMember)
  async createStaffMember(
    @graphql.Args() args: CreateStaffMemberArgs
  ): Promise<StaffMember> {
    return await this.service.createStaffMember({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => StaffMember)
  async updateStaffMember(
    @graphql.Args() args: UpdateStaffMemberArgs
  ): Promise<StaffMember | null> {
    try {
      return await this.service.updateStaffMember({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => StaffMember)
  async deleteStaffMember(
    @graphql.Args() args: DeleteStaffMemberArgs
  ): Promise<StaffMember | null> {
    try {
      return await this.service.deleteStaffMember(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
